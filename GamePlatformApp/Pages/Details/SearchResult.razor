@page "/game/search-results/{searchQuery}"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Search Results</PageTitle>

<h2 class="text-center mb-5 mt-3">Search Results for "@searchQuery"</h2>
@if (SearchGame == null)
{
    <h1>Loading...</h1>
}
else if (SearchGame.Results == null)
{
    <h2>No game found...</h2>
}
else
{
    <div class="container text-center">
        <div class="mb-4 fs-5">
            <label for="platformOption">Platforms</label>
            <select style="width: 11.5rem;" class="ps-1 selectBar" name="platformOption" id="platformOption"
            @onchange="HandlePlatformSelection">
                <option value="">Select Platform</option>
                <option value="&platforms=4">PC</option>
                <option value="&platforms=7">Nintendo Switch</option>
                <option value="&platforms=18">Playstation 4</option>
                <option value="&platforms=1">Xbox One</option>
            </select>
        </div>
        <div class="row">
            @foreach (var game in SearchGame.Results)
            {
                <div class="col">
                    <div class="card cardHover mb-3" style="width: 18rem; height: 19rem;">
                        <img src="@game.Image" alt="@game.Name" class="card-img-top border border-3" style="height: 10rem;">
                        <div class="card-body">
                            <h5 class="fs-4"> <a style="color:  rgb(154, 55, 253);" href="/game/@game.Id">@game.Name</a></h5>
                            @foreach (var g in game.Genre)
                            {
                                <p style="display: inline-block;" class="me-2">@g.Name </p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            @foreach (var game in GamesList)
            {
                <div class="col">
                    <div class="card cardHover mb-3" style="width: 18rem; height: 18rem;">
                        <img src="@game.Image" alt="@game.Name" class="card-img-top border border-3" style="height: 10rem;">
                        <div class="card-body">
                            <h5 class="fs-4"><a style="color:  rgb(154, 55, 253);" href="/game/@game.Id">@game.Name</a></h5>
                            @foreach (var g in game.Genre)
                            {
                                <p style="display: inline-block;" class="me-2">@g.Name </p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
<div class="text-center mb-5 mt-3">
    @if (nextPage != null || SearchGame?.Next != null)
    {
        <button class="btn button" @onclick="LoadMore">Load More</button>
    }
    @if (SearchGame != null)
    {
        <button @onclick="ScrollToTop" class="btn button ms-3">Back to the Top</button>
    }
</div>

@code {
    [Parameter]
    public string? searchQuery { get; set; }
    private Games? SearchGame { get; set; }
    private List<GameResults> GamesList = new List<GameResults>();
    private string? nextPage;
    private string? platformOption = "";

    protected override async Task OnParametersSetAsync()
    {
        platformOption = "";

        var res = await
        Http.GetAsync($"https://api.rawg.io/api/games?key=9cdb4d324c4a4643bb3d48d32b5884b2&search={searchQuery}");
        if (res.IsSuccessStatusCode)
        {
            SearchGame = await res.Content.ReadFromJsonAsync<Games>();
            nextPage = SearchGame?.Next;
        }
        else
        {
            SearchGame = null;
        }
    }

    private async Task LoadMore()
    {
        if (nextPage != null)
        {
            var res = await Http.GetAsync($"{nextPage}");
            if (res.IsSuccessStatusCode)
            {
                var gamesResult = await res.Content.ReadFromJsonAsync<Games>();
                nextPage = gamesResult?.Next;
                GamesList.AddRange(gamesResult.Results);
            }
            else
            {
                SearchGame = null;
            }
        }
    }

    private async Task FetchPlatforms()
    {
        string url =
        $"https://api.rawg.io/api/games?key=9cdb4d324c4a4643bb3d48d32b5884b2&search={searchQuery}";
        var res = await Http.GetAsync($"{url}{platformOption}");
        if (res.IsSuccessStatusCode)
        {
            SearchGame = await res.Content.ReadFromJsonAsync<Games>();
            nextPage = SearchGame?.Next;
        }
        else
        {
            SearchGame = null;
        }
    }

    private async Task HandlePlatformSelection(ChangeEventArgs e)
    {
        platformOption = e.Value?.ToString();
        await FetchPlatforms();
    }

    private async void ScrollToTop()
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }
}